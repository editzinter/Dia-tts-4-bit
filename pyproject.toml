[project]
name = "dia-tts-4bit"
version = "1.0.0"
description = "4-bit quantized Dia-1.6B TTS model for efficient inference on low-VRAM hardware"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
authors = [
    {name = "Dia TTS 4-Bit Team"},
]
keywords = [
    "text-to-speech",
    "tts",
    "quantization",
    "4-bit",
    "dia",
    "nari-labs",
    "low-vram",
    "pytorch",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "transformers>=4.30.0",
    "huggingface-hub>=0.15.0",
    "numpy>=1.21.0",
    "soundfile>=0.12.0",
    "psutil>=5.8.0",
    "tqdm>=4.64.0",
]

[project.optional-dependencies]
# Advanced quantization methods (require additional libraries)
advanced = [
    "bitsandbytes>=0.41.0",
    "auto-gptq>=0.4.0",
    "optimum>=1.12.0",
    "accelerate>=0.20.0",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "flake8>=5.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "mypy>=1.0.0",
]

# All optional dependencies
all = [
    "dia-tts-4bit[advanced,dev]",
]

[project.urls]
Homepage = "https://github.com/editzinter/Dia-tts-4-bit"
Repository = "https://github.com/editzinter/Dia-tts-4-bit"
Issues = "https://github.com/editzinter/Dia-tts-4-bit/issues"
Documentation = "https://github.com/editzinter/Dia-tts-4-bit#readme"

[project.scripts]
dia-quantize = "simple_quantize:main"
dia-preset-quantize = "preset_quantize:main"
dia-benchmark = "benchmark:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | dia
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["dia/*"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [
    "dia/",
    "venv/",
    ".venv/",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/dia/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
